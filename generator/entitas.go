package generator

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

var PackageName = "ecs"

const header string = `//////////////////////////////////////////////////////////////////////////
//
// Copyright (c) 2021 Vladislav Fedotov (Falldot)
// License: MIT License
// MIT License web page: https://opensource.org/licenses/MIT
//
//////////////////////////////////////////////////////////////////////////
//
// This file generated by Entitas-Go generator. PLEASE DO NOT EDIT IT.
//
// Entitas-Go: github.com/Falldot/Entitas-Go
//
//////////////////////////////////////////////////////////////////////////
package %s
`

var files []string = []string{
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/entityPool.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/component.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/componentBitSet.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/componentPool.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/events.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/contexts.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/entity.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/entityBase.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/matcher.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/group.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/collector.go",
	"https://raw.githubusercontent.com/Falldot/Entitas-Go/master/ecs/system.go",
}

func CreateEntitasLibFile() {
	if _, err := os.Stat(GetDir()); err != nil {
		if os.IsNotExist(err) {
			os.Mkdir(GetDir(), os.ModePerm)
		}
	}
	file, _ := os.Create(GetPath("Entitas.go"))
	defer file.Close()

	var EntitasFile []byte

	sliceByte := []byte(GetHeader())
	EntitasFile = append(EntitasFile, sliceByte...)

	for _, v := range files {
		resp, err := http.Get(v)
		if err != nil {
			fmt.Println(err)
		}
		defer resp.Body.Close()

		fContent, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			panic(err)
		}
		EntitasFile = append(EntitasFile, fContent[147:]...)
	}

	file.WriteString(string(EntitasFile))
}

func CreateEntitasContextFile(context string, components []*Component, src []byte) string {
	contextFile, _ := os.Create(GetPath(context))
	defer contextFile.Close()

	newSRC := string(src)
	newSRC = strings.Replace(newSRC, "package", "//", -1)
	for _, v := range components {
		newSRC = strings.Replace(newSRC, fmt.Sprintf(" %s ", v.Name), fmt.Sprintf(" %s ", v.Name+"Component"), -1)
		newSRC = strings.Replace(newSRC, fmt.Sprintf("*%s ", v.Name), fmt.Sprintf("*%s ", v.Name+"Component"), -1)
	}
	constsText := GetHeader() + componentConstansTemplate
	contextData := GetHeader() + newSRC

	for i, v := range components {
		if v.Ident {
			contextData += componentTemplate
			contextData += componentTemplateGetMethodSingleType
		} else {
			contextData += componentTemplate
			contextData += componentTemplateGetMethodStruct
		}

		// {name}
		contextData = strings.Replace(contextData, "{name}", v.Name, -1)

		// {const}
		constsText = strings.Replace(constsText, "{context}", context[:len(context)-3], -1)
		constsText = strings.Replace(constsText, "{componentCount}", fmt.Sprint(len(components)), -1)
		contextData = strings.Replace(contextData, "//go:generate go run github.com/Falldot/Entitas-Go", "", -1)
		if i == 0 {
			constsText = strings.Replace(constsText, "{const}", v.Name, -1)
		} else {
			next := "\n" + v.Name + " //next"
			constsText = strings.Replace(constsText, " //next", next, -1)
		}

		var result, argsWithType, args []string
		for n, f := range v.Fields {
			var str, str2 string

			if v.Ident {
				contextData = strings.Replace(contextData, "{type}", f, -1)
				str = "\tc" + " = (*" + n + "Component" + ")(&" + n + ")"
			} else {
				str = "\tc." + n + " = " + n + "\n"
			}
			result = append(result, str)

			str2 = n + " " + f
			argsWithType = append(argsWithType, str2)

			args = append(args, n)
		}

		results := strings.Join(result, "")
		contextData = strings.Replace(contextData, "{result}", results, -1)

		argsWithTypes := strings.Join(argsWithType, ",")
		contextData = strings.Replace(contextData, "{argsWithType}", argsWithTypes, -1)

		arg := strings.Join(args, ",")
		contextData = strings.Replace(contextData, "{args}", arg, -1)
	}

	contextFile.WriteString(contextData)
	return constsText
}
